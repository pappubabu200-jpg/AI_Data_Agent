import schedule
import time
import subprocess
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from email.mime.text import MIMEText
import os
from config import EMAIL_ADDRESS, EMAIL_PASSWORD, RECIPIENT_EMAIL

def send_email(file_path):
    msg = MIMEMultipart()
    msg['From'] = EMAIL_ADDRESS
    msg['To'] = RECIPIENT_EMAIL
    msg['Subject'] = 'Weekly AI Data Agent Report'
    msg.attach(MIMEText('Attached is the weekly report generated by the AI Data Agent.', 'plain'))

    with open(file_path, "rb") as attachment:
        part = MIMEBase('application', 'octet-stream')
        part.set_payload(attachment.read())
        encoders.encode_base64(part)
        part.add_header('Content-Disposition', f"attachment; filename={os.path.basename(file_path)}")
        msg.attach(part)

    server = smtplib.SMTP('smtp.gmail.com', 587)
    server.starttls()
    server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
    server.send_message(msg)
    server.quit()
    print(f"ðŸ“§ Report sent to {RECIPIENT_EMAIL}")

def job():
    print("Running weekly AI Data Agent report...")
    subprocess.run(["python", "main.py"], check=True)
    report_path = max([os.path.join('reports', f) for f in os.listdir('reports')], key=os.path.getctime)
    send_email(report_path)
    print("Weekly report generated and emailed successfully!")

schedule.every().monday.at("09:00").do(job)
print("Scheduler started. Keep this script running to auto-generate weekly reports.")

while True:
    schedule.run_pending()
    time.sleep(60)
